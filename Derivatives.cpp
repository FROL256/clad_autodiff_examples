void VertexShader_jac_1_2_3(const CamInfo &u, float vx, float vy, float vz, float output[2], float *jacobianMatrix) {
    const CamInfo &_d_u = {};
    float _t0;
    float _t1;
    float _t2;
    float _t3;
    float _t4;
    float _t5;
    float _d_W = 0;
    float _t6;
    float _t7;
    float _t8;
    float _t9;
    float _t10;
    float _t11;
    float _t12;
    float _t13;
    float _t14;
    float _t15;
    float _t16;
    float _t17;
    float _t18;
    float _t19;
    float _t20;
    float _t21;
    float _t22;
    float _t23;
    float _t24;
    float _t25;
    _t1 = vx;
    _t0 = u.projM[3];
    _t3 = vy;
    _t2 = u.projM[7];
    _t5 = vz;
    _t4 = u.projM[11];
    const float W = _t1 * _t0 + _t3 * _t2 + _t5 * _t4 + u.projM[15];
    _t9 = vx;
    _t8 = u.projM[0];
    _t11 = vy;
    _t10 = u.projM[4];
    _t13 = vz;
    _t12 = u.projM[8];
    _t14 = (_t9 * _t8 + _t11 * _t10 + _t13 * _t12 + u.projM[12]);
    _t7 = W;
    _t15 = ((_t14 / _t7) * 0.5F + 0.5F);
    _t6 = u.width;
    output[0] = (((vx * u.projM[0] + vy * u.projM[4] + vz * u.projM[8] + u.projM[12]) / W) * 0.5F + 0.5F) * u.width;
    _t19 = vx;
    _t18 = u.projM[1];
    _t21 = vy;
    _t20 = u.projM[5];
    _t23 = vz;
    _t22 = u.projM[9];
    _t24 = -(_t19 * _t18 + _t21 * _t20 + _t23 * _t22 + u.projM[13]);
    _t17 = W;
    _t25 = ((_t24 / _t17) * 0.5F + 0.5F);
    _t16 = u.height;
    output[1] = ((-(vx * u.projM[1] + vy * u.projM[5] + vz * u.projM[9] + u.projM[13]) / W) * 0.5F + 0.5F) * u.height;
    {
        float _r17 = 1 * _t16;
        float _r18 = _r17 * 0.5F;
        float _r19 = _r18 / _t17;
        float _r20 = -_r19 * _t18;
        jacobianMatrix[3UL] += _r20;
        float _r21 = _t19 * -_r19;
        float _r22 = -_r19 * _t20;
        jacobianMatrix[4UL] += _r22;
        float _r23 = _t21 * -_r19;
        float _r24 = -_r19 * _t22;
        jacobianMatrix[5UL] += _r24;
        float _r25 = _t23 * -_r19;
        float _r26 = _r18 * -_t24 / (_t17 * _t17);
        float _r27 = _t25 * 1;
    }
    {
        float _r6 = 1 * _t6;
        float _r7 = _r6 * 0.5F;
        float _r8 = _r7 / _t7;
        float _r9 = _r8 * _t8;
        jacobianMatrix[0UL] += _r9;
        float _r10 = _t9 * _r8;
        float _r11 = _r8 * _t10;
        jacobianMatrix[1UL] += _r11;
        float _r12 = _t11 * _r8;
        float _r13 = _r8 * _t12;
        jacobianMatrix[2UL] += _r13;
        float _r14 = _t13 * _r8;
        float _r15 = _r7 * -_t14 / (_t7 * _t7);
        float _r16 = _t15 * 1;
    }
    {
        float _r0 = _d_W * _t0;
        float _r1 = _t1 * _d_W;
        float _r2 = _d_W * _t2;
        float _r3 = _t3 * _d_W;
        float _r4 = _d_W * _t4;
        float _r5 = _t5 * _d_W;
    }
}
static inline void VertexShader_jac_1_2_3(const CamInfo &u, float vx, float vy, float vz, float output[2], float *jacobianMatrix) {
    const CamInfo &_d_u = {};
    float _t0;
    float _t1;
    float _t2;
    float _t3;
    float _t4;
    float _t5;
    float _d_W = 0;
    float _t6;
    float _t7;
    float _t8;
    float _t9;
    float _t10;
    float _t11;
    float _t12;
    float _t13;
    float _t14;
    float _t15;
    float _t16;
    float _t17;
    float _t18;
    float _t19;
    float _t20;
    float _t21;
    float _t22;
    float _t23;
    float _t24;
    float _t25;
    _t1 = vx;
    _t0 = u.projM[3];
    _t3 = vy;
    _t2 = u.projM[7];
    _t5 = vz;
    _t4 = u.projM[11];
    const float W = _t1 * _t0 + _t3 * _t2 + _t5 * _t4 + u.projM[15];
    _t9 = vx;
    _t8 = u.projM[0];
    _t11 = vy;
    _t10 = u.projM[4];
    _t13 = vz;
    _t12 = u.projM[8];
    _t14 = (_t9 * _t8 + _t11 * _t10 + _t13 * _t12 + u.projM[12]);
    _t7 = W;
    _t15 = ((_t14 / _t7) * 0.5F + 0.5F);
    _t6 = u.width;
    output[0] = (((vx * u.projM[0] + vy * u.projM[4] + vz * u.projM[8] + u.projM[12]) / W) * 0.5F + 0.5F) * u.width;
    _t19 = vx;
    _t18 = u.projM[1];
    _t21 = vy;
    _t20 = u.projM[5];
    _t23 = vz;
    _t22 = u.projM[9];
    _t24 = -(_t19 * _t18 + _t21 * _t20 + _t23 * _t22 + u.projM[13]);
    _t17 = W;
    _t25 = ((_t24 / _t17) * 0.5F + 0.5F);
    _t16 = u.height;
    output[1] = ((-(vx * u.projM[1] + vy * u.projM[5] + vz * u.projM[9] + u.projM[13]) / W) * 0.5F + 0.5F) * u.height;
    {
        float _r17 = 1 * _t16;
        float _r18 = _r17 * 0.5F;
        float _r19 = _r18 / _t17;
        float _r20 = -_r19 * _t18;
        jacobianMatrix[3UL] += _r20;
        float _r21 = _t19 * -_r19;
        float _r22 = -_r19 * _t20;
        jacobianMatrix[4UL] += _r22;
        float _r23 = _t21 * -_r19;
        float _r24 = -_r19 * _t22;
        jacobianMatrix[5UL] += _r24;
        float _r25 = _t23 * -_r19;
        float _r26 = _r18 * -_t24 / (_t17 * _t17);
        float _r27 = _t25 * 1;
    }
    {
        float _r6 = 1 * _t6;
        float _r7 = _r6 * 0.5F;
        float _r8 = _r7 / _t7;
        float _r9 = _r8 * _t8;
        jacobianMatrix[0UL] += _r9;
        float _r10 = _t9 * _r8;
        float _r11 = _r8 * _t10;
        jacobianMatrix[1UL] += _r11;
        float _r12 = _t11 * _r8;
        float _r13 = _r8 * _t12;
        jacobianMatrix[2UL] += _r13;
        float _r14 = _t13 * _r8;
        float _r15 = _r7 * -_t14 / (_t7 * _t7);
        float _r16 = _t15 * 1;
    }
    {
        float _r0 = _d_W * _t0;
        float _r1 = _t1 * _d_W;
        float _r2 = _d_W * _t2;
        float _r3 = _t3 * _d_W;
        float _r4 = _d_W * _t4;
        float _r5 = _t5 * _d_W;
    }
}
